<script src="{{ 'facets.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'main-search.js' | asset_url }}" defer="defer"></script>

<style>
draggable-menu {
    display: block;
    position: fixed;
    width: 80px;
    height: 80px;
    z-index: 999;
}

    .menu-drawer__navigation {
        display: none;
        background: rgb(48,48,51);
    background: linear-gradient(90deg, rgba(48,48,51,1) 0%, rgba(155,153,157,1) 100%);
        border-radius:20px;
        width: fit-content;
        margin:auto;
    }

.menu {
    display: block!important;
    width: 130px;
    height: 130px;
    border-radius: 50%;
    /* background-color: lightgray; */
    background-image: url(https://cdn.shopify.com/s/files/1/0794/5106/2557/files/Menu_Buttons_1.png?v=1692710880);
    background-position: center;
    background-repeat: no-repeat;
    background-size: contain;
    position: absolute;
    cursor: pointer;
    transition: top 0.3s, left 0.3s; /* Smooth transition for top and left properties */
    /* bottom:50px; */
    display: flex;
    justify-content: center;
    align-items: center;
    color: #fff;
    text-transform: uppercase;
    font-size: 1.5rem;
}
li.menu-item {
    font-family: 'BlackMango-Regular';
    font-size: 2rem;
}

li.menu-item.menu-item2 {
    font-family: 'Avenir Regular';
    font-size: 1rem;
}
.point {
    width: 30px;
    height: 30px;
    /* background-color: red; */
    position: absolute;
}

.point.left {
    top: 50%;
    left: 20px;
    transform: translateY(-50%);
}

.point.bottom-left {
    bottom: 30px;
    left: 20px;
}

.point.bottom {
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
}

.point.bottom-right {
    bottom: 30px;
    right: 20px;
}

.point.right {
    top: 50%;
    right: 20px;
    transform: translateY(-50%);
}

/* MENU STYLE */
ul.menu-list {
    display: none;
    position: absolute;
    top: -300px;
    background: rgb(48,48,51);
    background: linear-gradient(90deg, rgba(48,48,51,1) 0%, rgba(155,153,157,1) 100%);
    list-style: none;
    padding: 10px 30px;
    border-radius: 5px;
    left: -70px;
    right: 0;
    margin: auto;
    width: 100%;
    min-width: 270px;
    transition: all 1s linear;
    box-shadow: 3px 3px 15px #585858;
}

.menu-open ul.menu-list {
    display: flex;
    flex-direction: column;
    transition: all 1s linear;
}

ul.menu-list li {
    width: max-content;
    margin: auto;
}

ul.menu-list li:hover {
    list-style-type: initial;
}

ul.menu-list a {
    color: #fff;
    text-decoration: none;
}


li.search-bar:hover {
    list-style-type: none!important;
}

/* SEARCH BAR */
.template-search {
    height: 20px;
    display: flex;
    gap: 10px;
    align-items: center;
    max-width: 250px;
}
.template-search svg {
    color: #fff;
}
.search-box svg {
    width: 20px;
    height: 20px;
}

div#search-icon .open-search-box {
    display: block;
}
div#search-icon .close-search-box {
    display: none;
}
div#search-icon .close-search-box svg{
    width: 15px;
    height: 15px;
}


div#search-icon[data-open-search] .close-search-box {
    display: block;
}
div#search-icon[data-open-search] .open-search-box {
    display: none;
}
div#search-icon {
color: #fff;
}

.template-search__header {
    display: none;
}

div#search-icon[data-open-search]~.template-search__header{
    display: block;
}

.template-search .field:before {
    display: none;
}

.template-search .field:after {
    display: none;
}

.template-search label.field__label {
    color: #fff;
    font-size: 1rem;
    font-style: italic;
    width: fit-content;
    left: 0;
    right: 0;
    margin: auto;
}

.template-search input#Search-In-Template {
    background: transparent;
    padding-right: 1.5rem;
    color: #fff;
}

.template-search input#Search-In-Template:focus-visible{
    box-shadow: unset;
}

.template-search input#Search-In-Template:focus-visible~label.field__label{
    opacity: .5;
}

.predictive-search {
    max-height: 400px!important;
}

/* Position search block */
.predictive-search.predictive-search--search-template {
    width: 560px;
    left: -21rem;
}

@media (max-width:480px){
    .predictive-search.predictive-search--search-template {
        width: 300px;
        left: -70px;        
    }
}
</style>
    
    <draggable-menu> 

    </draggable-menu>

<script>
    var menuData = [
        {% for link in section.settings.menu.links %}
        {
            "title": "{{ link.title | escape }}",
            "url": "{{ link.url | escape }}"
        }
        {% unless forloop.last %},{% endunless %}
        {% endfor %}
    ];

    var menuData2 = [
        {% for link in section.settings.second-menu.links %}
        {
            "title": "{{ link.title | escape }}",
            "url": "{{ link.url | escape }}"
        }
        {% unless forloop.last %},{% endunless %}
        {% endfor %}
    ];

    class DraggableMenu extends HTMLElement {
        constructor() {
            super();

            this.isDragging = false;
            this.startX = 0;
            this.startY = 0;
            this.menuStartX = 0;
            this.menuStartY = 0;
            this.points = {
                'left': { x: 100, y: window.innerHeight / 2 },
                'bottom-left': { x: 100, y: window.innerHeight - 100 },
                'bottom': { x: window.innerWidth / 2, y: window.innerHeight - 100 },
                'bottom-right': { x: window.innerWidth - 100, y: window.innerHeight - 100 },
                'right': { x: window.innerWidth - 100, y: window.innerHeight / 2 }
            };

            this.menu = document.createElement('div');
            this.menu.className = 'menu';
            this.appendChild(this.menu);

            // Create the menu list container
            this.menuList = document.createElement('ul');
            this.menuList.className = 'menu-list';
            this.menu.appendChild(this.menuList);

            // Set the initial position to 'bottom'
            this.menu.style.left = `${this.points['bottom'].x - this.menu.offsetWidth / 2}px`;
            this.menu.style.top = `${this.points['bottom'].y - this.menu.offsetHeight / 2}px`;

            // Add draggable points (just for visual reference)
            for (let position in this.points) {
                let point = document.createElement('div');
                point.className = `point ${position}`;
                this.appendChild(point);
            }

            this.menu.addEventListener('mousedown', (e) => {
                this.isDragging = true;
                this.startX = e.clientX;
                this.startY = e.clientY;
                let rect = this.menu.getBoundingClientRect();
                this.menuStartX = rect.left;
                this.menuStartY = rect.top;
                // Add a class to prevent text selection
                document.body.classList.add('no-select');
            });

            window.addEventListener('mousemove', (e) => {
                if (this.isDragging) {
                    let dx = e.clientX - this.startX;
                    let dy = e.clientY - this.startY;

                    this.menu.style.left = `${this.menuStartX + dx}px`;
                    this.menu.style.top = `${this.menuStartY + dy}px`;
                }
            });

            window.addEventListener('mouseup', () => {
                if (this.isDragging) {
                    this.isDragging = false;

                    // Remove the class to allow text selection
                    document.body.classList.remove('no-select');

                    // Snap to closest point
                    let menuCenter = {
                        x: this.menu.offsetLeft + this.menu.offsetWidth / 2,
                        y: this.menu.offsetTop + this.menu.offsetHeight / 2
                    };
                    let closestPoint = null;
                    let closestDistance = Infinity;

                    for (let position in this.points) {
                        let point = this.points[position];
                        let dx = point.x - menuCenter.x;
                        let dy = point.y - menuCenter.y;
                        let distance = Math.sqrt(dx * dx + dy * dy);

                        if (distance < closestDistance) {
                            closestDistance = distance;
                            closestPoint = point;
                        }
                    }

                    this.menu.style.left = `${closestPoint.x - this.menu.offsetWidth / 2}px`;
                    this.menu.style.top = `${closestPoint.y - this.menu.offsetHeight / 2}px`;

                    // Position menu list items based on menu's position
                    this.positionMenuListItems(closestPoint);
                }
            });

            // Add a click event listener to the menu to toggle the visibility of menu items
            // Existing event listener for the 'menu'
            this.menu.addEventListener('click', (event) => {
                // Check if the click occurred inside the menu
                if (!event.target.closest('.menu-list')) {
                    // If not a click inside the menu list, toggle the 'menu-open' class
                    this.menu.classList.toggle('menu-open');
                }
            });

            // Concatenate menuData2 with menuData
            const combinedMenuData = menuData.concat(menuData2);

            // Load menu items from the combined data
            const menuItems = combinedMenuData.map(item => {
                // Check if the item comes from menuData2
                const isMenuData2Item = menuData2.includes(item);

                // Assign a class based on whether it's from menuData2 or not
                const itemClass = isMenuData2Item ? 'menu-item menu-item2' : 'menu-item';

                return `<li class="${itemClass}"><a href="${item.url}">${item.title}</a></li>`;
            });

            // Add the 'custom-header-search' snippet before the menu items
            const searchSnippet = `
                <!-- Add your custom-header-search snippet here -->
                <li class="search-bar">
                <div class="template-search{% unless search.performed and search.results_count > 0 %} template-search--empty{% endunless %} section-{{ section.id }}-padding">
                    <div id="search-icon">
                        <div class="search-box open-search-box">
                            <svg class="icon icon-search" aria-hidden="true" focusable="false">
                                <use href="#icon-search">
                            </svg>
                        </div>
                        <div class="search-box close-search-box">
                            <svg class="icon icon-close" aria-hidden="true" focusable="false">
                                <use href="#icon-close">
                            </svg>
                        </div>
                    </div>
                    <div class="template-search__header page-width" data-search-container="false">
                    <div class="template-search__search">
                        {%- if settings.predictive_search_enabled -%}
                        <predictive-search data-loading-text="{{ 'accessibility.loading' | t }}">
                        {%- endif -%}
                            <main-search>
                            <form action="{{ routes.search_url }}" method="get" role="search" class="search">
                                <div class="field">
                                <input
                                    class="search__input field__input"
                                    id="Search-In-Template"
                                    type="search"
                                    name="q"
                                    value="{{ search.terms | escape }}"
                                    placeholder="{{ 'general.search.search' | t }}"
                                    {%- if settings.predictive_search_enabled -%}
                                    role="combobox"
                                    aria-expanded="false"
                                    aria-owns="predictive-search-results"
                                    aria-controls="predictive-search-results"
                                    aria-haspopup="listbox"
                                    aria-autocomplete="list"
                                    autocorrect="off"
                                    autocomplete="off"
                                    autocapitalize="off"
                                    spellcheck="false"
                                    {%- endif -%}
                                >
                                <label class="field__label" for="Search-In-Template">Search for products...</label>
                                <input name="options[prefix]" type="hidden" value="last">

                                {%- if settings.predictive_search_enabled -%}
                                    <div class="predictive-search predictive-search--search-template" tabindex="-1" data-predictive-search>
                                    <div class="predictive-search__loading-state">
                                        <svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                                        <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                                        </svg>
                                    </div>
                                    </div>

                                    <span class="predictive-search-status visually-hidden" role="status" aria-hidden="true"></span>
                                {%- endif -%}

                                <button type="reset" class="reset__button field__button{% if search.terms == blank %} hidden{% endif %}" aria-label="{{ 'general.search.reset' | t }}">
                                    <svg class="icon icon-close" aria-hidden="true" focusable="false">
                                    <use xlink:href="#icon-reset">
                                    </svg>
                                </button>
                                <button type="submit" class="search__button field__button" aria-label="{{ 'general.search.search' | t }}">
                                    <svg class="icon icon-search" aria-hidden="true" focusable="false">
                                    <use xlink:href="#icon-search">
                                    </svg>
                                </button>
                                </div>
                            </form>
                            </main-search>
                        {%- if settings.predictive_search_enabled -%}
                        </predictive-search>
                        {%- endif -%}

                    </div>
                    {%- if search.performed -%}
                        {%- unless section.settings.enable_filtering or section.settings.enable_sorting -%}
                        {%- if search.results_count > 0 -%}
                            <p role="status">{{ 'templates.search.results_with_count_and_term' | t: terms: search.terms, count: search.results_count }}</p>
                        {%- endif -%}
                        {%- endunless -%}
                        {%- if search.results_count == 0 and search.filters == empty -%}
                        <p role="status">{{ 'templates.search.no_results' | t: terms: search.terms }}</p>
                        {%- endif -%}
                    {%- endif -%}
                    </div>
                    {%- if search.performed -%}
                    {%- if section.settings.enable_sorting and section.settings.filter_type == 'vertical' and search.filters != empty -%}
                        <facet-filters-form class="facets facets-vertical-sort page-width small-hide no-js-hidden">
                        <form class="facets-vertical-form" id="FacetSortForm">
                            <div class="facet-filters sorting caption">
                            <div class="facet-filters__field">
                                <h2 class="facet-filters__label caption-large text-body">
                                <label for="SortBy">{{ 'products.facets.sort_by_label' | t }}</label>
                                </h2>
                                <div class="select">
                                {%- assign sort_by = search.sort_by | default: search.default_sort_by -%}
                                <select name="sort_by" class="facet-filters__sort select__select caption-large" id="SortBy" aria-describedby="a11y-refresh-page-message">
                                    {%- for option in search.sort_options -%}
                                    <option value="{{ option.value | escape }}"{% if option.value == sort_by %} selected="selected"{% endif %}>{{ option.name | escape }}</option>
                                    {%- endfor -%}
                                </select>
                                {% render 'icon-caret' %}
                                </div>
                            </div>
                            <noscript>
                                <button type="submit" class="facets__button-no-js button button--secondary">{{ 'products.facets.sort_button' | t }}</button>
                            </noscript>
                            </div>

                            <div class="product-count-vertical light" role="status">
                            <h2 class="product-count__text text-body">
                                <span id="ProductCountDesktop">
                                {%- if search.results_count -%}
                                    {{ 'templates.search.results_with_count' | t: terms: search.terms, count: search.results_count }}
                                {%- elsif search.products_count == search.all_products_count -%}
                                    {{ 'products.facets.product_count_simple' | t: count: search.products_count }}
                                {%- else -%}
                                    {{ 'products.facets.product_count' | t: product_count: search.products_count, count: search.all_products_count }}
                                {%- endif -%}
                                </span>
                            </h2>
                            <div class="loading-overlay__spinner">
                                <svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                                <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                                </svg>
                            </div>
                            </div>
                        </form>
                        </facet-filters-form>
                    {%- endif -%}
                    <div{% if section.settings.filter_type == 'vertical' %} class="facets-vertical page-width"{% endif %}>
                        {%- if search.filters != empty -%}
                        {%- if section.settings.enable_filtering or section.settings.enable_sorting -%}
                            <aside aria-labelledby="verticalTitle" class="facets-wrapper{% unless section.settings.enable_filtering %} facets-wrapper--no-filters{% endunless %}{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}" id="main-search-filters" data-id="{{ section.id }}">
                            {% render 'facets', results: search, enable_filtering: section.settings.enable_filtering, enable_sorting: section.settings.enable_sorting, filter_type: section.settings.filter_type %}
                            </aside>
                        {%- endif -%}
                        {%- endif -%}
                        <div class="product-grid-container" id="ProductGridContainer">
                        {%- if search.results.size == 0 and search.filters != empty -%}
                            <div class="template-search__results collection collection--empty{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}" id="product-grid" data-id="{{ section.id }}">
                            <div class="loading-overlay gradient"></div>
                            <div class="title-wrapper center">
                                <h2 class="title title--primary">
                                {{ 'sections.collection_template.empty' | t }}<br>
                                {{ 'sections.collection_template.use_fewer_filters_html' | t: link: search_url, class: "underlined-link link" }}
                                </h2>
                            </div>
                            </div>
                        {%- else -%}
                            <div class="template-search__results collection{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}" id="product-grid" data-id="{{ section.id }}">
                            <div class="loading-overlay gradient"></div>
                            <ul class="grid product-grid  grid--{{ section.settings.columns_mobile }}-col-tablet-down grid--{{ section.settings.columns_desktop }}-col-desktop" role="list">
                                {%- for item in search.results -%}
                                {% assign lazy_load = false %}
                                {%- if forloop.index > 2 -%}
                                    {%- assign lazy_load = true -%}
                                {%- endif -%}

                                <li class="grid__item">
                                    {%- case item.object_type -%}
                                    {%- when 'product' -%}
                                        {%- capture product_settings -%}{%- if section.settings.product_show_vendor -%}vendor,{%- endif -%}title,price{%- endcapture -%}
                                        {% render 'card-product',
                                        card_product: item,
                                        media_aspect_ratio: section.settings.image_ratio,
                                        show_secondary_image: section.settings.show_secondary_image,
                                        show_vendor: section.settings.show_vendor,
                                        show_rating: section.settings.show_rating,
                                        lazy_load: lazy_load
                                        %}
                                    {%- when 'article' -%}
                                        {% render 'article-card',
                                        article: item,
                                        show_image: true,
                                        show_date: section.settings.article_show_date,
                                        show_author: section.settings.article_show_author,
                                        show_badge: true,
                                        media_aspect_ratio: 1,
                                        lazy_load: lazy_load
                                        %}
                                    {%- when 'page' -%}
                                        <div class="article-card-wrapper card-wrapper underline-links-hover">
                                        <div class="card card--card card--text ratio color-{{ settings.blog_card_color_scheme }}" style="--ratio-percent: 100%;">
                                            <div class="card__content">
                                            <div class="card__information">
                                                <h3 class="card__heading">
                                                <a href="{{ item.url }}" class="full-unstyled-link">
                                                    {{ item.title | truncate: 50 | escape }}
                                                </a>
                                                </h3>
                                            </div>
                                            <div class="card__badge {{ settings.badge_position }}">
                                                <span class="badge color-background-1">{{ 'templates.search.page' | t }}</span>
                                            </div>
                                            </div>
                                        </div>
                                        </div>
                                    {%- endcase -%}
                                </li>
                                {%- endfor -%}
                            </ul>
                            </div>
                        {%- endif -%}
                        </div>
                    </div>
                    {%- endif -%}
                </div>
                </li>
            `;

            // Combine the 'custom-header-search' snippet with the menu items
            const finalMenuItems = [searchSnippet, ...menuItems];

            // Add menu items to the menu list container
            this.menuList.innerHTML = finalMenuItems.join('');

        }

        positionMenuListItems(menuPosition) {
            const menuListItems = this.menuList;
            switch (menuPosition) {
                case this.points['bottom']:
                    // Position for bottom center
                    menuListItems.style.top = '-300px';
                    menuListItems.style.left = '-70px';
                    menuListItems.style.right = '0';
                    break;
                case this.points['left']:
                    // Position for left side
                    menuListItems.style.top = '-60px';
                    menuListItems.style.left = '150px';
                    menuListItems.style.right = 'unset';
                    break;
                case this.points['right']:
                    // Position for right side
                    menuListItems.style.top = '-60px';
                    menuListItems.style.left = 'unset';
                    menuListItems.style.right = '150px';
                    break;
                case this.points['bottom-right']:
                    // Position for right side
                    menuListItems.style.top = '-240px';
                    menuListItems.style.left = 'unset';
                    menuListItems.style.right = '130px';
                break;
                case this.points['bottom-left']:
                    // Position for right side
                    menuListItems.style.top = '-240px';
                    menuListItems.style.left = '130px';
                    menuListItems.style.right = 'unset';
                    break;
                default:
                    // Default position
                    menuListItems.style.top = '-300px';
                    menuListItems.style.left = '-70px';
                    menuListItems.style.right = '0';
                    break;
            }
        }
    }

    customElements.define('draggable-menu', DraggableMenu);

   // Add a click event listener to the document to close the menu when clicking outside of it
    document.addEventListener('click', (event) => {
        if (!this.menu.contains(event.target)) {
            // Click occurred outside the menu, so close it
            this.menu.classList.remove('menu-open');
        }
    });
</script>

<script>
    // Get references to the elements
    const searchIcon = document.getElementById("search-icon");
    console.log('Search Icon: ' + searchIcon);
    
    searchIcon.addEventListener('click', function(){
        console.log('Second Search Icon: ' + searchIcon);
        //this.setAttribute('data-open-search', true);
        this.toggleAttribute("data-open-search");
    });
    
    </script>
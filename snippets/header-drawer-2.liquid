<script src="{{ 'facets.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'main-search.js' | asset_url }}" defer="defer"></script>
{{ 'draggable-menu.css' | asset_url | stylesheet_tag }}

<draggable-menu></draggable-menu>

<script>
    var menuData = [
        {% for link in section.settings.menu.links %}
        {
            "title": "{{ link.title | escape }}",
            "url": "{{ link.url | escape }}",
            "children": [
                {% for child_link in link.links %}
                {
                    "title": "{{ child_link.title | escape }}",
                    "url": "{{ child_link.url | escape }}",
                    "children": [
                        {% for grandchild_link in child_link.links %}
                        {
                            "title": "{{ grandchild_link.title | escape }}",
                            "url": "{{ grandchild_link.url | escape }}"
                        }
                        {% unless forloop.last %},{% endunless %}
                        {% endfor %}
                    ]
                }
                {% unless forloop.last %},{% endunless %}
                {% endfor %}
            ]
        }
        {% unless forloop.last %},{% endunless %}
        {% endfor %}
    ];

    var menuData2 = [
        {% for link in section.settings.second-menu.links %}
        {
            "title": "{{ link.title | escape }}",
            "url": "{{ link.url | escape }}"
        }
        {% unless forloop.last %},{% endunless %}
        {% endfor %}
    ];

    class DraggableMenu extends HTMLElement {
        constructor() {
            super();

            this.isDragging = false;
            this.startX = 0;
            this.startY = 0;
            this.menuStartX = 0;
            this.menuStartY = 0;
            this.points = {
                'left': { x: 100, y: window.innerHeight / 2 },
                'bottom-left': { x: 100, y: window.innerHeight - 100 },
                'bottom': { x: window.innerWidth / 2, y: window.innerHeight - 100 },
                'bottom-right': { x: window.innerWidth - 100, y: window.innerHeight - 100 },
                'right': { x: window.innerWidth - 100, y: window.innerHeight / 2 }
            };

            this.menu = document.createElement('div');
            this.menu.className = 'menu';
            this.appendChild(this.menu);

            // Create the menu list container
            this.menuList = document.createElement('ul');
            this.menuList.className = 'menu-list';
            this.menu.appendChild(this.menuList);

            // Set the initial position to 'bottom'
            this.menu.style.left = `${this.points['bottom'].x - this.menu.offsetWidth / 2}px`;
            this.menu.style.top = `${this.points['bottom'].y - this.menu.offsetHeight / 2}px`;

            // Add draggable points (just for visual reference)
            for (let position in this.points) {
                let point = document.createElement('div');
                point.className = `point ${position}`;
                point.style.left = `${this.points[position].x}px`;
                point.style.top = `${this.points[position].y}px`;
                this.appendChild(point);
            }

            this.menu.addEventListener('mousedown', (e) => {
                this.isDragging = true;
                this.startX = e.clientX;
                this.startY = e.clientY;
                let rect = this.menu.getBoundingClientRect();
                this.menuStartX = rect.left;
                this.menuStartY = rect.top;
                // Add a class to prevent text selection
                document.body.classList.add('no-select');
            });

            window.addEventListener('mousemove', (e) => {
                if (this.isDragging) {
                    let dx = e.clientX - this.startX;
                    let dy = e.clientY - this.startY;

                    this.menu.style.left = `${this.menuStartX + dx}px`;
                    this.menu.style.top = `${this.menuStartY + dy}px`;
                }
            });

            window.addEventListener('mouseup', () => {
                if (this.isDragging) {
                    this.isDragging = false;

                    // Remove the class to allow text selection
                    document.body.classList.remove('no-select');

                    // Snap to closest point
                    let menuCenter = {
                        x: this.menu.offsetLeft + this.menu.offsetWidth / 2,
                        y: this.menu.offsetTop + this.menu.offsetHeight / 2
                    };
                    let closestPoint = null;
                    let closestDistance = Infinity;

                    for (let position in this.points) {
                        let point = this.points[position];
                        let dx = point.x - menuCenter.x;
                        let dy = point.y - menuCenter.y;
                        let distance = Math.sqrt(dx * dx + dy * dy);

                        if (distance < closestDistance) {
                            closestDistance = distance;
                            closestPoint = point;
                        }
                    }

                    this.menu.style.left = `${closestPoint.x - this.menu.offsetWidth / 2}px`;
                    this.menu.style.top = `${closestPoint.y - this.menu.offsetHeight / 2}px`;

                    // Position menu list items based on menu's position
                    this.positionMenuListItems(closestPoint);
                }
            });

            // Touch events for mobile
            this.menu.addEventListener('touchstart', (e) => {
                this.isDragging = true;
                this.startX = e.touches[0].clientX;
                this.startY = e.touches[0].clientY;
                let rect = this.menu.getBoundingClientRect();
                this.menuStartX = rect.left;
                this.menuStartY = rect.top;
                document.body.classList.add('no-select');
            });

            window.addEventListener('touchmove', (e) => {
                if (this.isDragging) {
                    let dx = e.touches[0].clientX - this.startX;
                    let dy = e.touches[0].clientY - this.startY;

                    this.menu.style.left = `${this.menuStartX + dx}px`;
                    this.menu.style.top = `${this.menuStartY + dy}px`;
                }
            });

            window.addEventListener('touchend', () => {
                if (this.isDragging) {
                    this.isDragging = false;

                    // Your touchend logic goes here
                    // For example, you might want to snap to the closest point:
                    let menuCenter = {
                        x: this.menu.offsetLeft + this.menu.offsetWidth / 2,
                        y: this.menu.offsetTop + this.menu.offsetHeight / 2
                    };
                    let closestPoint = null;
                    let closestDistance = Infinity;

                    for (let position in this.points) {
                        let point = this.points[position];
                        let dx = point.x - menuCenter.x;
                        let dy = point.y - menuCenter.y;
                        let distance = Math.sqrt(dx * dx + dy * dy);

                        if (distance < closestDistance) {
                            closestDistance = distance;
                            closestPoint = point;
                        }
                    }

                    this.menu.style.left = `${closestPoint.x - this.menu.offsetWidth / 2}px`;
                    this.menu.style.top = `${closestPoint.y - this.menu.offsetHeight / 2}px`;

                    // Position menu list items based on menu's position
                    this.positionMenuListItems(closestPoint);
                }
            });

            // Add a click event listener to the menu to toggle the visibility of menu items
            // Existing event listener for the 'menu'

            const headerDrawer = document.getElementById('shopify-section-header-drawer');
            this.menu.addEventListener('click', (event) => {
                // Check if the click occurred inside the menu
                if (!event.target.closest('.menu-list')) {
                    // If not a click inside the menu list, toggle the 'menu-open' class
                    this.menu.classList.toggle('menu-open');
                    headerDrawer.classList.toggle('menu-overlay');
                    console.log("Header Drawer: "+ headerDrawer);
                }
            });

            // Concatenate menuData2 with menuData
            const combinedMenuData = menuData.concat(menuData2.map(item => {
                return {...item, class: 'menu-item menu-item2'};
            }));
            console.log('Combined Menu Data:', combinedMenuData);
            console.log('Menu Data 1:', menuData);
            console.log('Menu Data 2:', menuData2);

            // Load menu items from the combined data
            this.loadMenuItems(combinedMenuData);
        }

        loadMenuItems(menuData) {
            const generateMenuHTML = (menuData) => {
                let menuHTML = '';
                for (let item of menuData) {
                    const hasChildren = item.children && item.children.length > 0;
                    const itemClass = hasChildren ? 'menu-item has-children' : item.class || 'menu-item';
                    menuHTML += `<li class="${itemClass}"><a href="${item.url}">${item.title}</a>`;
                    if (hasChildren) {
                        menuHTML += '<ul class="submenu">';
                        menuHTML += generateMenuHTML(item.children);
                        menuHTML += '</ul>';
                    }
                    menuHTML += '</li>';
                }
                return menuHTML;
            };

            const searchSnippet = `
                <li class="search-bar">
                    <form id="custom-search-form" action="/search" method="get">
                        <button type="submit"><svg class="modal__toggle-open icon icon-search" fill="none" height="24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><circle cx="11" cy="11" r="8"/><line x1="21" x2="16.65" y1="21" y2="16.65"/></svg></button>
                        <input type="text" name="q" id="search" placeholder="Search products...">
                    </form>
                </li>
            `;

            const menuHTML = searchSnippet + generateMenuHTML(menuData);
            this.menuList.innerHTML = menuHTML;
        }

        positionMenuListItems(menuPosition) {
            const menuListItems = this.menuList;
            switch (menuPosition) {
                case this.points['bottom']:
                    // Position for bottom center
                    menuListItems.style.top = '-380px';
                    menuListItems.style.left = '-25px';
                    menuListItems.style.right = '0';
                    break;
                case this.points['left']:
                    // Position for left side
                    menuListItems.style.top = '-100px';
                    menuListItems.style.left = '180px';
                    menuListItems.style.right = 'unset';
                    break;
                case this.points['right']:
                    // Position for right side
                    menuListItems.style.top = '-100px';
                    menuListItems.style.left = 'unset';
                    menuListItems.style.right = '180px';
                    break;
                case this.points['bottom-right']:
                    // Position for right side
                    menuListItems.style.top = '-240px';
                    menuListItems.style.left = 'unset';
                    menuListItems.style.right = '180px';
                    break;
                case this.points['bottom-left']:
                    // Position for right side
                    menuListItems.style.top = '-230px';
                    menuListItems.style.left = '180px';
                    menuListItems.style.right = 'unset';
                    break;
                default:
                    // Default position
                    menuListItems.style.top = '-380px';
                    menuListItems.style.left = '-25px';
                    menuListItems.style.right = '0';
                    break;
            }
        }

        connectedCallback() {
            const headerDrawer = document.getElementById('shopify-section-header-drawer');
            // Add a click event listener to the document to close the menu when clicking outside of it
            document.addEventListener('click', (event) => {
                if (!this.menu.contains(event.target)) {
                    // Click occurred outside the menu, so close it
                    this.menu.classList.remove('menu-open');
                    headerDrawer.classList.remove('menu-overlay');
                }
            });

            // Add a click event listener to the menu items to toggle visibility of child items
            this.menuList.querySelectorAll('.has-children > a').forEach((menuItem) => {
                menuItem.addEventListener('click', (event) => {
                    event.preventDefault(); // Prevent the link from being followed
                    const submenu = menuItem.nextElementSibling;
                    submenu.classList.toggle('submenu-open');
                });
            });

            // Position menu list items based on the initial menu position
            this.positionMenuListItems(this.points['bottom']);
            this.attachSubmenuToggleListeners();
        }
        attachSubmenuToggleListeners() {
            // Assuming the menuList is already populated with items
            const menuItemsWithChildren = this.menuList.querySelectorAll('.has-children');
            menuItemsWithChildren.forEach(menuItem => {
                // Directly listen on the parent item or a specific part of it depending on your markup
                menuItem.addEventListener('click', function(event) {
                    const submenu = menuItem.querySelector('.submenu');
                    if (submenu) {
                        submenu.classList.toggle('open');
                        event.preventDefault(); // Prevent following the link
                        event.stopPropagation(); // Prevent closing the menu
                    }
                });
            });
        }
    }

    customElements.define('draggable-menu', DraggableMenu);
</script>
